basePath: /the-post-pilot/v1
definitions:
  app.generatePostRequest:
    properties:
      topic:
        type: string
    type: object
  app.generatePostResponse:
    properties:
      createdAt:
        type: string
      generatedText:
        type: string
      logId:
        type: string
      model:
        type: string
      usage:
        additionalProperties: true
        type: object
    type: object
  app.loginRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: "123456"
        type: string
    type: object
  app.loginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  app.refreshRequest:
    properties:
      refreshToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  app.refreshResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  app.registerRequest:
    properties:
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: "123456"
        type: string
    type: object
  app.socialLoginRequest:
    properties:
      avatarUrl:
        example: https://example.com/avatar.jpg
        type: string
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        type: string
      provider:
        allOf:
        - $ref: '#/definitions/models.AuthProvider'
        enum:
        - google
        - linkedin
        example: google
      providerId:
        example: "123456789"
        type: string
    type: object
  app.updateProfileRequest:
    properties:
      dataSources:
        items:
          $ref: '#/definitions/models.DataSource'
        type: array
      openAiApiKey:
        type: string
      openAiModel:
        type: string
    type: object
  models.AuthProvider:
    enum:
    - local
    - google
    - linkedin
    type: string
    x-enum-varnames:
    - AuthProviderLocal
    - AuthProviderGoogle
    - AuthProviderLinkedIn
  models.DataSource:
    properties:
      tags:
        items:
          type: string
        type: array
      type:
        $ref: '#/definitions/models.DataSourceType'
      url:
        type: string
    type: object
  models.DataSourceType:
    enum:
    - rss
    - devto
    - hackernews
    type: string
    x-enum-varnames:
    - DataSourceRSS
    - DataSourceDevTo
    - DataSourceHackerNews
  models.User:
    properties:
      avatarUrl:
        example: https://example.com/avatar.jpg
        type: string
      createdAt:
        example: "2024-01-01T00:00:00Z"
        type: string
      dataSources:
        items:
          $ref: '#/definitions/models.DataSource'
        type: array
      email:
        example: john@example.com
        type: string
      id:
        type: string
      lastLogin:
        example: "2024-01-01T00:00:00Z"
        type: string
      linkedinAccessToken:
        type: string
      linkedinRefreshToken:
        type: string
      name:
        example: John Doe
        type: string
      openAiApiKey:
        type: string
      openAiModel:
        type: string
      provider:
        allOf:
        - $ref: '#/definitions/models.AuthProvider'
        example: local
      providerId:
        example: "123456789"
        type: string
      updatedAt:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  services.Article:
    properties:
      publishedAt:
        type: string
      source:
        type: string
      summary:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      url:
        type: string
    type: object
host: localhost:8081
info:
  contact: {}
  description: API for The Post Pilot Social Media Management
  title: The Post Pilot API
  version: "1.0"
paths:
  /articles/suggestions:
    get:
      description: Returns a list of technical articles from user-configured sources
        (RSS, dev.to, Hacker News)
      parameters:
      - description: Search keyword
        example: AI
        in: query
        name: q
        type: string
      - description: Published after (YYYY-MM-DD)
        example: "2024-05-01"
        in: query
        name: from
        type: string
      - description: Published before (YYYY-MM-DD)
        example: "2024-06-01"
        in: query
        name: to
        type: string
      - description: Comma-separated tags
        example: '"go,ai,architecture"'
        in: query
        name: tags
        type: string
      - description: Max articles (default 6, max 100)
        example: 10
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK" x-example([{"title":"Go 1.22 Released","url":"https://dev.to/golang/go-1-22-released-1234","source":"DEV
            Community","publishedAt":"2024-05-01T12:00:00Z","summary":"Resumo do artigo
            em portuguÃªs...","tags":["go","release"]}])
          schema:
            items:
              $ref: '#/definitions/services.Article'
            type: array
        "401":
          description: '{ \"error\": \"Invalid user claims\" }'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{ \"error\": \"Internal server error\" }'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get article suggestions from user sources
      tags:
      - Articles
  /auth/google/callback:
    get:
      description: Handles Google OpenID Connect callback, authenticates or creates
        user, returns JWT and user object
      parameters:
      - description: Authorization code from Google
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{ \"user\": { ... }, \"token\": \"...\" }'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: '{ \"error\": \"Missing code from Google\" }'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{ \"error\": \"Failed to get access token from Google\" }'
          schema:
            additionalProperties: true
            type: object
      summary: Google OpenID Connect callback
      tags:
      - Google
  /auth/google/url:
    get:
      description: Returns the Google OpenID Connect consent URL for social login
      produces:
      - application/json
      responses:
        "200":
          description: '{ \"url\": \"https://accounts.google.com/o/oauth2/v2/auth?...\"
            }'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{ \"error\": \"Google client ID or redirect URI not configured\"
            }'
          schema:
            additionalProperties: true
            type: object
      summary: Get Google consent URL
      tags:
      - Google
  /auth/linkedin/callback:
    get:
      description: Handles LinkedIn OpenID Connect callback, authenticates or creates
        user, returns JWT and user object
      parameters:
      - description: Authorization code from LinkedIn
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{ \"user\": { ... }, \"token\": \"...\" }'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: '{ \"error\": \"Missing code from LinkedIn\" }'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{ \"error\": \"Failed to get access token from LinkedIn\"
            }'
          schema:
            additionalProperties: true
            type: object
      summary: LinkedIn OpenID Connect callback
      tags:
      - LinkedIn
  /auth/linkedin/publish-callback:
    get:
      description: Handles LinkedIn OAuth callback for publishing, saves access token
        to user
      parameters:
      - description: Authorization code from LinkedIn
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Exemplo: {\"access_token\": \"...\" }'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'Exemplo: {\"error\": \"Missing code from LinkedIn\" }'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'Exemplo: {\"error\": \"Failed to get access token from LinkedIn\"
            }'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: LinkedIn publish OAuth callback
      tags:
      - LinkedIn
  /auth/linkedin/publish-url:
    get:
      description: Returns the LinkedIn OAuth URL for publishing posts (w_member_social)
      produces:
      - application/json
      responses:
        "200":
          description: 'Exemplo: {\"url\": \"https://www.linkedin.com/oauth/v2/authorization?...\"
            }'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Exemplo: {\"error\": \"LinkedIn client ID or redirect URI
            not configured\" }'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get LinkedIn publish consent URL
      tags:
      - LinkedIn
  /auth/linkedin/url:
    get:
      description: Returns the LinkedIn OpenID Connect consent URL for social login
      produces:
      - application/json
      responses:
        "200":
          description: 'Exemplo: {\"url\": \"https://www.linkedin.com/oauth/v2/authorization?...\"
            }'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Exemplo: {\"error\": \"LinkedIn client ID or redirect URI
            not configured\" }'
          schema:
            additionalProperties: true
            type: object
      summary: Get LinkedIn consent URL
      tags:
      - LinkedIn
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/app.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.loginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Login with email and password
      tags:
      - User
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new JWT token using a valid refresh token
      parameters:
      - description: Refresh token info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/app.refreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.refreshResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Refresh JWT using refresh token
      tags:
      - User
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with name, email and password
      parameters:
      - description: User registration info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/app.registerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - User
  /auth/social:
    post:
      consumes:
      - application/json
      description: Authenticate or register user with social provider (Google, LinkedIn)
      parameters:
      - description: Social login info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/app.socialLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.loginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Login or register with social provider
      tags:
      - User
  /me:
    get:
      description: Returns the full user object for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: 'Exemplo de resposta: {\"id\":\"123\",\"name\":\"JoÃ£o Silva\",\"email\":\"joao@exemplo.com\",\"avatarUrl\":\"https://exemplo.com/avatar.jpg\",\"provider\":\"google\",\"providerId\":\"abc123\",\"openAiApiKey\":\"sk-...\",\"openAiModel\":\"gpt-4\",\"dataSources\":[{\"type\":\"rss\",\"url\":\"https://martinfowler.com/feed.atom\",\"tags\":[\"architecture\",\"ai\"]}],\"createdAt\":\"2024-01-01T00:00:00Z\",\"updatedAt\":\"2024-01-01T00:00:00Z\"}'
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Get authenticated user profile
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update OpenAI and data sources for the authenticated user
      parameters:
      - description: Profile update info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/app.updateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'Exemplo de resposta: {\"id\":\"123\",\"name\":\"JoÃ£o Silva\",\"email\":\"joao@exemplo.com\",\"avatarUrl\":\"https://exemplo.com/avatar.jpg\",\"provider\":\"google\",\"providerId\":\"abc123\",\"openAiApiKey\":\"sk-...\",\"openAiModel\":\"gpt-4\",\"dataSources\":[{\"type\":\"rss\",\"url\":\"https://martinfowler.com/feed.atom\",\"tags\":[\"architecture\",\"ai\"]}],\"createdAt\":\"2024-01-01T00:00:00Z\",\"updatedAt\":\"2024-01-01T00:00:00Z\"}'
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user profile/configuration
      tags:
      - User
  /posts/generate:
    post:
      consumes:
      - application/json
      description: Gera sugestÃ£o de post a partir de um tema/artigo usando OpenAI
      parameters:
      - description: Dados para geraÃ§Ã£o do post
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/app.generatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.generatePostResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Generate post suggestion using OpenAI
      tags:
      - Posts
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
